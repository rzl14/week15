class Solution {
public:
    vector<vector<int>> ans;
    vector<int> path;
    void dfs(vector<vector<int>>& graph, int a, int n) {
        if (path[a] == n) {
            ans.push_back(path);
            return;
        }
        int t = path[a];
        for (int i = 0; i < graph[t].size(); i ++) {
            path.push_back(graph[t][i]);
            dfs(graph, a + 1, n);
            path.pop_back();
        }
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        path.push_back(0);
        dfs(graph, 0, graph.size() - 1);
        return ans;
    }
};